# export.yml

# ============================================================
# Configuration des Exports Niamoto
# ============================================================

exports:

  # ------------------------------------------------------------
  # Cible 1: Génération du Site Web Statique Complet
  # ------------------------------------------------------------
  - name: web_pages
    enabled: true
    exporter: html_page_exporter # Plugin gérant la génération du site HTML

    params:
      # --- Paramètres Généraux de l'Exportateur HTML ---
      template_dir: "niamoto_project/templates/" # Où chercher les templates Jinja (priorité au projet)
      output_dir: "exports/web"                 # Où générer le site web
      base_template: "_layouts/_base.html"      # Template de base pour toutes les pages
      copy_assets_from:                         # Dossiers d'assets à copier
        - "src/niamoto/publish/assets"          # Assets par défaut de Niamoto/Plugin
        - "niamoto_project/assets/"             # Assets spécifiques du projet (CSS, JS, images...)

      # --- Configuration Globale du Site (disponible dans tous les templates via {{ site.* }}) ---
      site:
        title: "Flore de Nouvelle-Calédonie (Exemple Niamoto)" # Titre affiché (ex: <title>, header)
        logo_header: "assets/images/logo_site.png"            # Optionnel: Logo pour l'en-tête
        # logo_footer: "assets/images/logo_partenaire.png"    # Optionnel: Autre logo pour pied de page
        lang: "fr"                                            # Langue pour la balise <html>
        # Ajoutez d'autres métadonnées globales si nécessaire (auteur, description...)

      # --- Configuration de la Navigation Principale (disponible via {{ navigation }}) ---
      navigation:
        - text: "Accueil"
          url: "/"                             # Lien vers /exports/web/index.html
        - text: "Taxons"
          url: "/taxon/index.html"             # Lien vers l'index des taxons
        # - text: "Parcelles"                  # Décommenter et ajuster si groupe plot activé
        #   url: "/plot/index.html"
        # - text: "Zones d'étude"              # Décommenter et ajuster si groupe shape activé
        #   url: "/shape/index.html"
        - text: "Méthodologie"
          url: "/methodology.html"             # Lien vers page statique
        - text: "À Propos"
          url: "/about.html"                   # Lien vers page statique

    # --- Définition des Pages Statiques (Accueil, A Propos, etc.) ---
    static_pages:
      # Page d'accueil principale
      - name: home
        template: "main_index.html"            # Utilise niamoto_project/templates/main_index.html (ou défaut)
        output_file: "index.html"              # Génère /exports/web/index.html
        context:                               # Données spécifiques pour cette page
          welcome_title: "Bienvenue"
          intro_text: "Explorez la richesse de la flore de Nouvelle-Calédonie à travers cette plateforme."

      # Page "À Propos" (contenu depuis fichier Markdown externe)
      - name: about
        template: "_layouts/static_page.html"  # Utilise un template générique pour page statique
        output_file: "about.html"
        context:
          title: "À Propos de ce Projet"
          content_source: "niamoto_project/content/about.md" # Chemin vers le fichier Markdown

      # Page "Méthodologie" (contenu directement en Markdown ici)
      - name: methodology
        template: "_layouts/static_page.html"
        output_file: "methodology.html"
        context:
          title: "Méthodologie"
          content_markdown: |
            ## Collecte des Données
            Les données présentées proviennent de diverses campagnes de terrain...
            (Détails sur les protocoles, les sources, etc.)

            ## Traitement et Analyse
            Les données ont été standardisées et analysées en utilisant l'outil Niamoto.
            Les étapes clés incluent :
            1. Validation des données d'entrée.
            2. Transformations configurables (calcul d'indices, agrégations...).
            3. Génération des exports (visualisations web, API, fichiers CSV).

            *Pour plus de détails, consultez la documentation complète.*

    # --- Génération des Pages basées sur les Groupes de Données ---
    groups:

      # ------------------------- Groupe: Taxon (Plugins Spécialisés) -------------------------
      - group_by: taxon
        index_template: "taxon/index.html"          # Template pour /exports/web/taxon/index.html
        page_template: "taxon/detail.html"         # Template pour /exports/web/taxon/{id}.html
        output_pattern: "taxon/{id}.html"
        index_output_pattern: "taxon/index.html"
        widgets: # Widgets utilisés dans taxon/detail.html

          # --- Info Panel ---
          - plugin: info_grid # Votre plugin spécialisé pour les infos
            data_source: general_info # Clé où trouver les données
            params:
              title: "Informations générales"
              layout: grid # Option de mise en page
              fields: # Liste des champs à afficher
                - { source: name, label: Taxon }
                - { source: parent_family, label: "Famille" }
                - { source: parent_genus, label: "Genre" }
                - { source: rank, label: "Rang", format: "map", mapping: { "family": "Famille", "genus": "Genre", "species": "Espèce", "subspecies": "Sous-espèce" } }
                - { source: occurrences_count, label: "Nombre d'occurrences", format: "number" }
                - { source: redlist_cat, label: "Catégorie UICN", format: "map", mapping: { "CR": "En danger critique", "EN": "En danger", "VU": "Vulnérable", "NT": "Quasi menacé", "LC": "Préoccupation mineure", "DD": "Données insuffisantes", "NE": "Non évalué" } }
                - { source: endemia_url, format: "link", display_text: "Fiche Endemia" }
                - { source: id_florical, format: "link", display_text: "Florical", base_url: "http://publish.plantnet-project.org/project/florical_fr/collection/florical/taxons/details/" }
                - { source: images, label: "Images", format: "gallery", image_mapping: { url: "big_thumb", thumbnail: "small_thumb", author: "auteur", date: "datmaj" } }

          # --- Carte Interactive ---
          - plugin: interactive_map # Votre plugin spécialisé pour les cartes
            data_source: distribution_map # Clé où trouver les données géo
            params:
              title: "Distribution géographique"
              description: Distribution géographique des occurrences
              layers: # Configuration des couches
                - id: "occurrences" # Nom interne de la couche
                  source: coordinates # Clé dans data_source pour les géométries/points
                  type: "circle_markers" # Type de rendu pour cette couche
                  # Style spécifique à cette couche (syntaxe dépendra du plugin map)
                  style: { color: "#1fb99d", weight: 1, fillColor: "#00716b", fillOpacity: 0.5, radius: 8 }

          # --- Bar Plot - Sous-taxons principaux ---
          - plugin: bar_plot # Votre plugin spécialisé pour les barres
            data_source: top_species
            params:
              title: "Sous-taxons principaux"
              description: "Principaux sous-taxons (espèce, sous-espèce)"
              orientation: h # 'h' pour horizontal
              x_field: counts # Clé pour les données numériques (axe X ici)
              y_field: tops   # Clé pour les catégories (axe Y ici)
              xaxis_title: "Nombre d'occurrences"
              yaxis_title: "Sous-taxon"
              sort: descending # Indication pour trier (optionnel, géré par plugin)
              color_palette: "viridis" # Option de palette de couleurs

          # --- Bar Plot - Distribution DBH ---
          - plugin: bar_plot
            data_source: dbh_distribution
            params:
              title: "Distribution diamétrique (DBH)"
              description: Répartition par classe de diamètre
              orientation: v # 'v' pour vertical (défaut)
              x_field: bins # Clé pour les catégories (axe X)
              y_field: percentages # Clé pour les valeurs (axe Y)
              xaxis_title: "Classe de diamètre (cm)"
              yaxis_title: "Fréquence (%)"
              color: "#4CAF50" # Couleur unique pour les barres

          # --- Bar Plot - Phénologie (Multi-barres groupées) ---
          - plugin: bar_plot
            data_source: phenology_distribution
            params:
              title: "Phénologie"
              description: Phénologie des états fertiles (fleur, fruit)
              orientation: v
              x_field: labels # Mois sur l'axe X
              # Liste des séries Y à afficher groupées
              y_fields:
                - { field: "month_data.fleur", name: "Fleur", color: "#FFD700" }
                - { field: "month_data.fruit", name: "Fruit", color: "#DC143C" }
              barmode: group # Mode groupé (le plugin doit le gérer)
              xaxis_title: "Mois"
              yaxis_title: "Fréquence (%)"
              yaxis_range: [0, 50] # Limite de l'axe Y
              legend: { position: "bottom" } # Position de la légende

          # --- Donut Chart - Distribution Substrat ---
          - plugin: donut_chart # Votre plugin spécialisé pour les camemberts
            data_source: distribution_substrat
            params:
              title: "Distribution substrat"
              description: "Distribution des occurrences par substrat"
              labels: ['Ultramafique (UM)', 'non-Ultramafique (NUM)'] # Labels fixes pour les parts
              values_fields: ['um_percent', 'num_percent'] # Clés pour trouver les valeurs correspondantes
              colors: ['#e1a553', '#a97742'] # Couleurs pour les parts
              hole: 0.5 # Taille du trou (0 pour camembert, >0 pour donut)
              show_labels_on_parts: true # Option pour afficher % sur les parts

          # --- Bar Plot - Milieu de Vie (Holdridge) ---
          - plugin: bar_plot
            data_source: holdridge_distribution
            params:
              title: "Milieu de vie (Holdridge)"
              description: Fréquence par milieu de vie
              orientation: v
              x_field: categories # Clé pour les catégories (sec, humide...)
              y_field: percentages # Clé pour les pourcentages
              xaxis_title: "Milieu de vie"
              yaxis_title: "Fréquence (%)"
              yaxis_range: [0, 100]
              # Mapping de couleurs basé sur la catégorie X
              color_source: x_field # Le plugin utilise cette clé pour appliquer le mapping
              color_mapping: {'sec': '#8B0000', 'humide': '#FFEB3B', 'Très humide': '#1E88E5'}

          # --- Bar Plot - Répartition Pluviométrie ---
          - plugin: bar_plot
            data_source: rainfall_distribution
            params:
              title: "Répartition pluviométrie"
              description: Distribution pluviométrique des occurrences
              orientation: h
              x_field: counts
              y_field: bins
              xaxis_title: "Nombre d'occurrences"
              yaxis_title: "Pluviométrie (mm/an)"
              yaxis_reversed: true # Inverser l'axe Y

          # --- Bar Plot - Répartition Altitudinale ---
          - plugin: bar_plot
            data_source: elevation_distribution
            params:
              title: "Répartition altitudinale"
              description: "Distribution altitudinale des occurrences"
              orientation: h
              x_field: counts
              y_field: bins
              xaxis_title: "Nombre d'occurrences"
              yaxis_title: "Altitude (m)"
              yaxis_reversed: true

          # --- Bar Plot - Stratification ---
          - plugin: bar_plot
            data_source: strata_distribution
            params:
              title: "Stratification"
              description: Répartition des occurrences par strate
              orientation: h
              x_field: counts
              y_field: labels
              xaxis_title: "Nombre d'occurrences"
              yaxis_title: "Strate"
              # Couleurs spécifiques basées sur l'ordre des labels Y (le plugin doit respecter l'ordre)
              colors: ["#90A4AE", "#66BB6A", "#43A047", "#2E7D32"]

          # --- Radial Gauge - Hauteur maximale ---
          - plugin: radial_gauge # Votre plugin spécialisé pour les jauges
            data_source: height_max
            params:
              title: "Hauteur maximale"
              description: Hauteur maximale atteinte
              value_field: max # Clé pour la valeur actuelle
              min_value: 0     # Début de l'échelle de la jauge
              max_value: 40    # Fin de l'échelle de la jauge
              units: "m"       # Unité à afficher à côté de la valeur
              # Définition des secteurs colorés
              steps:
                - { range: [0, 10], color: '#f02828' }
                - { range: [10, 18], color: '#fe6a00' }
                - { range: [18, 25], color: '#e8dd0f' }
                - { range: [25, 33], color: '#81e042' }
                - { range: [33, 40], color: '#049f50' }

          # --- Radial Gauge - Diamètre maximal (DBH) ---
          - plugin: radial_gauge
            data_source: dbh_max
            params:
              title: "Diamètre maximal (DBH)"
              description: Diamètre maximal atteint
              value_field: max
              min_value: 0
              max_value: 500
              units: "cm"
              steps:
                - { range: [1, 101], color: '#f02828' }
                - { range: [101, 200], color: '#fe6a00' }
                - { range: [200, 300], color: '#e8dd0f' }
                - { range: [300, 400], color: '#81e042' }
                - { range: [400, 500], color: '#049f50' }

          # --- Radial Gauge - Densité de bois ---
          - plugin: radial_gauge
            data_source: wood_density
            params:
              title: "Densité de bois"
              description: Densité de bois moyenne
              value_field: mean
              min_value: 0
              max_value: 1.2
              units: "g/cm³"
              value_format: ".2f" # Afficher avec 2 décimales
              steps:
                - { range: [0.000, 0.240], color: '#f02828' }
                - { range: [0.240, 0.480], color: '#fe6a00' }
                - { range: [0.480, 0.720], color: '#e8dd0f' }
                - { range: [0.720, 0.960], color: '#81e042' }
                - { range: [0.960, 1.200], color: '#049f50' }

          # --- Radial Gauge - Épaisseur d'écorce ---
          - plugin: radial_gauge
            data_source: bark_thickness
            params:
              title: "Épaisseur d'écorce"
              description: Epaisseur moyenne de l'écorce
              value_field: mean
              min_value: 0
              max_value: 80
              units: "mm"
              steps:
                - { range: [0, 16], color: '#f02828' }
                - { range: [16, 32], color: '#fe6a00' }
                - { range: [32, 48], color: '#e8dd0f' }
                - { range: [48, 64], color: '#81e042' }
                - { range: [64, 80], color: '#049f50' }

          # --- Radial Gauge - Surface foliaire spécifique ---
          - plugin: radial_gauge
            data_source: leaf_sla
            params:
              title: "Surface foliaire spécifique (SLA)"
              description: Surface foliaire spécifique moyenne
              value_field: mean
              min_value: 0
              max_value: 50
              units: "m²·kg⁻¹"
              value_format: ".1f" # Afficher avec 1 décimale
              steps:
                - { range: [0, 10], color: '#f02828' }
                - { range: [10, 20], color: '#fe6a00' }
                - { range: [20, 30], color: '#e8dd0f' }
                - { range: [30, 40], color: '#81e042' }
                - { range: [40, 50], color: '#049f50' }

          # --- Radial Gauge - Surface foliaire ---
          - plugin: radial_gauge
            data_source: leaf_area
            params:
              title: "Surface foliaire"
              description: Surface foliaire moyenne
              value_field: mean
              min_value: 0
              max_value: 1500
              units: "cm²"
              value_format: ".0f" # Afficher sans décimale
              steps:
                - { range: [0, 300], color: '#f02828' }
                - { range: [300, 600], color: '#fe6a00' }
                - { range: [600, 900], color: '#e8dd0f' }
                - { range: [900, 1200], color: '#81e042' }
                - { range: [1200, 1500], color: '#049f50' }

          # --- Radial Gauge - Épaisseur des feuilles ---
          - plugin: radial_gauge
            data_source: leaf_thickness
            params:
              title: "Épaisseur des feuilles"
              description: Epaisseur moyenne des feuilles
              value_field: mean
              min_value: 0
              max_value: 800
              units: "µm"
              value_format: ".0f" # Afficher sans décimale
              steps:
                - { range: [0, 160], color: '#f02828' }
                - { range: [160, 320], color: '#fe6a00' }
                - { range: [320, 480], color: '#e8dd0f' }
                - { range: [480, 640], color: '#81e042' }
                - { range: [640, 800], color: '#049f50' }

      # --------------------- Fin Groupe: Taxon -------------------------


      # ------------------------- Groupe: Plot (Plugins Spécialisés) -------------------------
      - group_by: plot
        index_template: "plot/index.html"             # Template pour /exports/web/plot/index.html
        page_template: "plot/detail.html"            # Template pour /exports/web/plot/{id}.html
        output_pattern: "plot/{id}.html"
        index_output_pattern: "plot/index.html"
        widgets: # Widgets utilisés dans plot/detail.html

          # --- Info Panel ---
          - plugin: info_grid # Votre plugin spécialisé pour les infos
            data_source: general_info # Clé JSON contenant les données pour ce panneau
            params:
              title: "Informations générales"
              layout: grid
              fields:
                - { source: plot_name, label: "Parcelle" }
                - { source: rainfall, label: "Précipitation annuelle moyenne", format: "number", units: "mm" }
                - { source: elevation, label: "Altitude", format: "number", units: "m" }
                - { source: holdridge, label: "Milieu de vie", format: "map", mapping: { "1": "Sec", "2": "Humide", "3": "Très humide" } }
                - { source: in_um, label: "Substrat", format: "map", mapping: { "true": "Substrat ultramafique", "false": "Substrat non-ultramafique" } }
                - { source: nb_families, label: "Nombre de familles" }
                - { source: nb_species, label: "Nombre d'espèces" }
                - { source: occurrences_count, label: "Nombre d'occurrences", format: "number" }

          # --- Carte Interactive ---
          - plugin: interactive_map # Votre plugin spécialisé pour les cartes
            data_source: map_panel # Clé JSON contenant les données pour la carte
            params:
              title: "Localisation de la parcelle"
              layers:
                - { id: "plot", source: geometry, type: "geojson", style: { color: "#1fb99d", weight: 2, fillOpacity: 0 } }

          # --- Bar Plot - Familles Dominantes ---
          - plugin: bar_plot # Votre plugin spécialisé pour les barres
            data_source: top_families
            params:
              title: "Familles dominantes"
              description: "Les dix familles botaniques les plus fréquentes"
              orientation: h
              x_field: counts
              y_field: tops
              xaxis_title: "Nombre d'occurrences"
              yaxis_title: "Famille"
              sort: descending # Tri implicite par valeur (plugin doit gérer)
              color_palette: "Spectral" # Palette pour couleurs générées

          # --- Bar Plot - Espèces Principales ---
          - plugin: bar_plot
            data_source: top_species
            params:
              title: "Espèces principales"
              description: "Les dix espèces botaniques les plus fréquentes"
              orientation: h
              x_field: counts
              y_field: tops
              xaxis_title: "Nombre d'occurrences"
              yaxis_title: "Espèce"
              sort: descending
              color_palette: "Plotly3"

          # --- Bar Plot - Distribution Diamétrique (DBH) Parcelle ---
          - plugin: bar_plot
            data_source: dbh_distribution
            params:
              title: "Distribution diamétrique (DBH)"
              description: "Distribution des DBH par classe de diamètre"
              orientation: v
              x_field: bins
              y_field: counts
              xaxis_title: "DBH (cm)"
              yaxis_title: "Nombre d'occurrences"
              color: "#4CAF50"

          # --- Bar Plot - Stratification Parcelle ---
          - plugin: bar_plot
            data_source: strata_distribution
            params:
              title: "Stratification"
              description: "Distribution des arbres selon la classification de Dawkins"
              orientation: h
              x_field: counts
              y_field: labels
              xaxis_title: "Nombre d'occurrences"
              yaxis_title: "Strate"
              colors: ["#90A4AE", "#66BB6A", "#43A047", "#2E7D32"] # Couleurs spécifiques par label Y

          # --- Donut Chart - Types Taxonomiques ---
          - plugin: donut_chart # Votre plugin spécialisé pour les camemberts
            data_source: taxonomic_distribution
            params:
              title: "Types de plantes"
              description: "Distinction selon les grands types de plantes arborescentes"
              labels_field: 'labels' # Clé pour les noms des parts
              values_field: 'percentages' # Clé pour les valeurs des parts
              colors: ['#4285F4', '#A8A8A8', '#F4B400', '#0F9D58'] # Couleurs spécifiques
              hole: 0.4 # Taille du trou
              legend: { position: 'right' } # Position légende
              show_labels_on_parts: true # Afficher % sur les parts

          # --- Bar Plot - Arbres Vivants/Morts (Barres empilées) ---
          - plugin: bar_plot # Le plugin bar_plot doit gérer le mode empilé
            data_source: living_dead_distribution
            params:
              title: "Arbres vivants/morts"
              description: "Proportion des arbres vivants et morts sur pied (DBH >= 10cm)"
              orientation: v
              x_field: categories # Supposons une clé comme ['Arbres']
              # Liste des séries Y à empiler
              y_fields:
                # Note: L'accès à l'index [0] ou [1] de 'percentages' doit être géré par le plugin
                # en se basant sur l'ordre ou un indice explicite si nécessaire.
                # Ici, on suppose que le plugin sait mapper 'Mort' au premier élément et 'Vivant' au second.
                - { field: "percentages", dataset_index: 0, name: "Mort", color: '#FF0000' }
                - { field: "percentages", dataset_index: 1, name: "Vivant", color: '#8BC34A' }
              barmode: stack # Mode empilé
              xaxis_title: ''
              yaxis_title: 'Proportion (%)'
              yaxis_range: [0, 100]
              show_value_labels: center # Option pour afficher les valeurs au centre des barres

          # --- Radial Gauge - Taux Identification Espèce ---
          - plugin: radial_gauge # Votre plugin spécialisé pour les jauges
            data_source: species_level
            params:
              title: "Taux identification espèce"
              description: "Pourcentage d'occurrences identifiées au niveau de l'espèce"
              value_field: value # Clé JSON de la valeur (ex: 0.85)
              min_value: 0
              max_value: 1
              # units: "%" # L'unité est gérée par le formatage
              value_format: ".0%" # Format en pourcentage
              steps:
                - { range: [0, 0.5], color: '#f02828' }
                - { range: [0.5, 0.7], color: '#fe6a00' }
                - { range: [0.7, 0.85], color: '#e8dd0f' }
                - { range: [0.85, 0.95], color: '#81e042' }
                - { range: [0.95, 1], color: '#049f50' }

          # --- Radial Gauge - Hauteur Moyenne ---
          - plugin: radial_gauge
            data_source: height
            params:
              title: "Hauteur moyenne canopée"
              description: "Hauteur moyenne de la canopée"
              value_field: value
              min_value: 0
              max_value: 40
              units: "m"
              steps:
                - { range: [0, 5], color: '#f02828' }
                - { range: [5, 10], color: '#fe6a00' }
                - { range: [10, 15], color: '#e8dd0f' }
                - { range: [15, 20], color: '#81e042' }
                - { range: [20, 40], color: '#049f50' }

          # --- Radial Gauge - Biomasse ---
          - plugin: radial_gauge
            data_source: biomass
            params:
              title: "Biomasse"
              description: "Biomasse totale (Chave 2005)"
              value_field: value
              min_value: 0
              max_value: 800
              units: "t/ha"
              steps:
                - { range: [0, 160], color: '#f02828' }
                - { range: [160, 320], color: '#fe6a00' }
                - { range: [320, 480], color: '#e8dd0f' }
                - { range: [480, 640], color: '#81e042' }
                - { range: [640, 800], color: '#049f50' }

          # --- Radial Gauge - Aire Basale ---
          - plugin: radial_gauge
            data_source: basal_area
            params:
              title: "Aire basale"
              description: "Somme de la section de tous les arbres"
              value_field: value
              min_value: 0
              max_value: 100
              units: "m²/ha"
              steps:
                - { range: [0, 15], color: '#f02828' }
                - { range: [15, 30], color: '#fe6a00' }
                - { range: [30, 45], color: '#e8dd0f' }
                - { range: [45, 60], color: '#81e042' }
                - { range: [60, 100], color: '#049f50' } # Ajusté

          # --- Radial Gauge - Densité de Bois Moyenne Parcelle ---
          - plugin: radial_gauge
            data_source: wood_density # Assurez-vous que la data_source est unique pour le plot
            params:
              title: "Densité de bois moyenne"
              description: "Densité moyenne de bois du peuplement"
              value_field: value
              min_value: 0
              max_value: 1.2
              units: "g/cm³"
              value_format: ".2f" # 2 décimales
              steps:
                - { range: [0.000, 0.240], color: '#f02828' }
                - { range: [0.240, 0.480], color: '#fe6a00' }
                - { range: [0.480, 0.720], color: '#e8dd0f' }
                - { range: [0.720, 0.960], color: '#81e042' }
                - { range: [0.960, 1.200], color: '#049f50' }

          # --- Radial Gauge - Richesse Spécifique ---
          - plugin: radial_gauge
            data_source: richness
            params:
              title: "Richesse spécifique (alpha)"
              description: "Nombre d'espèces par hectare"
              value_field: value
              min_value: 0
              max_value: 130
              units: "" # Pas d'unité
              value_format: ".0f" # Entier
              steps:
                - { range: [0, 28], color: '#f02828' }
                - { range: [28, 52], color: '#fe6a00' }
                - { range: [52, 78], color: '#e8dd0f' }
                - { range: [78, 104], color: '#81e042' }
                - { range: [104, 130], color: '#049f50' }

          # --- Radial Gauge - Indice de Shannon ---
          - plugin: radial_gauge
            data_source: shannon
            params:
              title: "Indice de Shannon"
              description: "Prend en compte nombre d'espèces et abondance relative"
              value_field: value
              min_value: 0
              max_value: 5
              units: ""
              value_format: ".2f" # 2 décimales
              steps:
                - { range: [0.0, 1.0], color: '#f02828' }
                - { range: [1.0, 2.0], color: '#fe6a00' }
                - { range: [2.0, 3.0], color: '#e8dd0f' }
                - { range: [3.0, 4.0], color: '#81e042' }
                - { range: [4.0, 5.0], color: '#049f50' }

          # --- Radial Gauge - Indice de Simpson ---
          - plugin: radial_gauge
            data_source: simpson
            params:
              title: "Indice de Simpson"
              description: "Contribution des espèces rares est faible"
              value_field: value
              min_value: 0
              max_value: 1
              units: ""
              value_format: ".2f"
              steps:
                - { range: [0.00, 0.20], color: '#f02828' }
                - { range: [0.20, 0.40], color: '#fe6a00' }
                - { range: [0.40, 0.60], color: '#e8dd0f' }
                - { range: [0.60, 0.80], color: '#81e042' }
                - { range: [0.80, 1.0], color: '#049f50' }

          # --- Radial Gauge - Équitabilité de Pielou ---
          - plugin: radial_gauge
            data_source: pielou
            params:
              title: "Équitabilité de Pielou"
              description: "Mesure la répartition des individus au sein des espèces"
              value_field: value
              min_value: 0
              max_value: 1
              units: ""
              value_format: ".2f"
              steps:
                - { range: [0.00, 0.20], color: '#f02828' }
                - { range: [0.20, 0.40], color: '#fe6a00' }
                - { range: [0.40, 0.60], color: '#e8dd0f' }
                - { range: [0.60, 0.80], color: '#81e042' }
                - { range: [0.80, 1.0], color: '#049f50' }

      # --------------------- Fin Groupe: Plot -------------------------

      # ------------------------- Groupe: Shape (Plugins Spécialisés) -------------------------
      - group_by: shape
        index_template: "shape/index.html"            # Template pour /exports/web/shape/index.html
        page_template: "shape/detail.html"           # Template pour /exports/web/shape/{id}.html
        output_pattern: "shape/{id}.html"
        index_output_pattern: "shape/index.html"
        widgets: # Widgets utilisés dans shape/detail.html

          # --- Info Panel ---
          - plugin: info_grid # Votre plugin spécialisé pour les infos
            data_source: general_info # Clé JSON pour les infos générales du shape
            params:
              title: "Informations générales"
              layout: grid
              fields:
                - { source: land_area_ha, label: "Surface totale", format: "number", units: "ha" }
                - { source: forest_area_ha, label: "Surface forêt", format: "number", units: "ha" }
                - { source: forest_mining_ha, label: "Forêt sur mine", format: "number", units: "ha" }
                - { source: forest_reserve_ha, label: "Forêt en réserve", format: "number", units: "ha" }
                - { source: forest_ppe_ha, label: "Forêt sur captage (PPE)", format: "number", units: "ha" }
                - { source: rainfall, label: "Pluviométrie", format: "range", units: "mm" }
                - { source: elevation_median, label: "Altitude médiane", format: "number", units: "m" }
                - { source: elevation_max, label: "Altitude maximale", format: "number", units: "m" }

          # --- Carte Interactive ---
          - plugin: interactive_map # Votre plugin spécialisé pour les cartes
            data_source: geography # Clé JSON contenant les données géo pour le shape
            params:
              title: "Distribution de la forêt"
              description: "Distribution de la forêt dans l'emprise sélectionnée"
              layers: # Plusieurs couches ici
                - id: shape
                  source: shape_coords # Clé dans 'geography' pour le contour du shape
                  type: "geojson" # Type de données géo
                  style: { color: "#1fb99d", weight: 2, fillOpacity: 0 } # Style de la couche
                - id: forest
                  source: forest_cover_coords # Clé dans 'geography' pour la forêt
                  type: "geojson"
                  style: { color: "#228b22", weight: 0.3, fillColor: "#228b22", fillOpacity: 0.8 }

          # --- Donut Chart - Couverture Forestière (Multiples) ---
          # Voir note précédente: ce plugin devra gérer les subplots ou générer 3 divs.
          # Ici, on configure pour l'emprise globale, le plugin devra être adapté.
          - plugin: donut_chart
            data_source: forest_cover
            params:
              title: "Couverture forestière"
              description: "Comparaison Emprise / Non-Ultramafique / Ultramafique"
              # Le plugin doit comprendre qu'il faut créer 3 doughnuts basés sur les sous-clés
              # 'emprise', 'num', 'um' de la data_source.
              datasets: # Structure pour indiquer les multiples doughnuts
                - name: "Emprise"
                  values_source: emprise # Cherche emprise.forest, emprise.non_forest
                  colors: ['#2E7D32', '#F4E4BC']
                - name: "Non-Ultramafique"
                  values_source: num # Cherche num.forest, num.non_forest
                  colors: ['#2E7D32', '#C5A98B']
                - name: "Ultramafique"
                  values_source: um # Cherche um.forest, um.non_forest
                  colors: ['#2E7D32', '#8B7355']
              labels: ['Forêt', 'Hors-forêt'] # Labels communs
              hole: 0.2 # Taille du trou
              show_labels_on_parts: true # Afficher % (plugin doit gérer le format)
              # Le plugin doit gérer la mise en page (subplots ou divs séparées)

          # --- Bar Plot - Occupation du Sol ---
          - plugin: bar_plot
            data_source: land_use
            params:
              title: "Occupation du sol"
              description: "Superficie occupée par type"
              orientation: v
              x_field: categories # Clé JSON pour les catégories
              y_field: values    # Clé JSON pour les superficies
              xaxis_title: ''
              yaxis_title: 'Superficie (ha)'
              # Mapping de couleurs basé sur la catégorie X
              color_source: x_field
              color_mapping:
                NUM: "#8B4513"
                UM: "#CD853F"
                Sec: "#8B0000"
                Humide: "#FFEB3B"
                "Très Humide": "#1E88E5"
                Réserve: "#4CAF50"
                PPE: "#90CAF9"
                Concessions: "#E57373"
                Forêt: "#2E7D32"
              # Le plugin doit gérer le formatage de l'axe Y si besoin (formatSurfaceValue)

          # --- Bar Plot - Distribution Altitudinale (Forêt/Hors-Forêt Empilé) ---
          - plugin: bar_plot # Le plugin doit gérer le mode empilé
            data_source: elevation_distribution.elevation # Accès à la clé imbriquée
            params:
              title: "Distribution altitudinale"
              description: "Distribution altitudinale de la forêt et du hors-forêt"
              orientation: h # Barres horizontales
              # x_fields pour l'empilement horizontal
              x_fields:
                - { field: "complement", name: "Hors-forêt", color: "#F4E4BC" }
                - { field: "subset", name: "Forêt", color: "#2E7D32" }
              y_field: classes # Classes d'altitude sur l'axe Y
              barmode: stack # Mode empilé
              xaxis_title: 'Superficie (ha)'
              yaxis_title: 'Altitude (m)'
              yaxis_reversed: true

          # --- Bar Plot - Forêt et Milieux de Vie (Holdridge Empilé) ---
          - plugin: bar_plot # Le plugin doit gérer le mode empilé
            data_source: holdridge
            params:
              title: "Forêt et milieux de vie (Holdridge)"
              description: "Distribution de la forêt selon les milieux"
              orientation: v # Barres verticales
              x_values: ['Sec', 'Humide', 'Très humide'] # Catégories X fixes
              # Séries Y à empiler
              y_fields:
                # Le plugin doit savoir extraire les sous-clés 'sec', 'humide', 'tres_humide'
                - { field: "non_forest", name: 'Hors-forêt', color: '#F4E4BC', subkeys: ['sec', 'humide', 'tres_humide']}
                - { field: "forest", name: 'Forêt', color: '#2E7D32', subkeys: ['sec', 'humide', 'tres_humide']}
              transform: "toPercentage" # Le plugin doit gérer la transformation en %
              barmode: stack
              xaxis_title: 'Type de milieu'
              yaxis_title: 'Proportion (%)'
              yaxis_range: [0, 100]

          # --- Donut Chart - Types Forestiers ---
          - plugin: donut_chart
            data_source: forest_types
            params:
              title: "Types forestiers"
              description: "Répartition de la forêt selon les trois types"
              labels_field: 'categories'  # Utilise les catégories du JSON comme labels
              values_field: 'values' # Utilise les valeurs du JSON
              transform: "toPercentage" # Le plugin calcule les pourcentages
              colors: ['#2E7D32', '#7CB342', '#C5E1A5'] # Ordre: Coeur, Mature, Secondaire?
              hole: 0.6
              legend: { position: 'bottom' }
              show_labels_on_parts: true # Le plugin doit gérer formatage spécifique (forestTypeLabelsPlugin)

          # --- Bar Plot - Couverture Forestière par Altitude (Pyramide) ---
          # Le plugin bar_plot doit gérer ce cas spécial (empilé relatif / négatif)
          - plugin: bar_plot
            data_source: forest_cover_by_elevation
            params:
              title: "Couverture forestière par altitude et substrat"
              description: "Distribution altitudinale de la couverture forestière"
              orientation: h
              # Séries X empilées (une sera négative)
              x_fields:
                - { field: "series.forest_um", name: 'Forêt (UM)', color: '#90EE90', transform: "negate" } # Le plugin applique la négation
                - { field: "series.forest_num", name: 'Forêt (NUM)', color: '#2E7D32' }
              y_field: class_name # Classes d'altitude sur l'axe Y
              barmode: relative # Mode pour pyramide/divergent
              xaxis_title: 'Couverture (%)'
              xaxis_range: [-100, 100]
              # Le plugin doit gérer le formatage des ticks de l'axe X pour afficher des valeurs absolues
              xaxis_tick_format: "absolute"
              yaxis_title: 'Altitude (m)'
              yaxis_reversed: true
              legend: { position: 'bottom' }
              # Le plugin doit gérer le formatage du tooltip (formatForestCoverTooltip)

          # --- Stacked Area Chart - Types Forestiers par Altitude ---
          # Il faut un plugin dédié pour les aires empilées
          - plugin: stacked_area_plot # Votre plugin spécialisé pour aires empilées
            data_source: forest_types_by_elevation
            params:
              title: "Types forestiers par altitude"
              description: "Distribution des types de forêts selon l'altitude"
              x_field: 'altitudes' # Axe X
              # Champs Y à empiler
              y_fields:
                - { field: 'secondaire', name: 'Forêt secondaire', color: '#C5E1A5' }
                - { field: 'mature', name: 'Forêt mature', color: '#7CB342' }
                - { field: 'coeur', name: 'Forêt de coeur', color: '#2E7D32' }
              transform: "stackedPercentage" # Le plugin doit calculer les % empilés
              sort_by: 'x_field' # Le plugin doit trier par altitude avant de tracer
              xaxis_title: 'Altitude (m)'
              yaxis_title: 'Fréquence (%)'
              yaxis_range: [0, 100]
              legend: { position: 'bottom' }
              # Le plugin doit gérer le formatage du tooltip (formatForestTypeElevationTooltip)

          # --- Line Plot - Distribution des Fragments Forestiers ---
          # Il faut un plugin dédié pour les lignes simples (ou bar_plot pourrait le gérer ?)
          - plugin: line_plot # Votre plugin spécialisé pour lignes
            data_source: fragmentation_distribution
            params:
              title: "Distribution des fragments forestiers"
              description: "Aire cumulée de chaque fragment forestier classé par taille"
              x_field: 'sizes' # Taille des fragments (Axe X)
              y_field: 'values' # Aire cumulée (Axe Y)
              transform: 'toPercentage' # Le plugin gère la conversion en %
              sort_by: 'x_field' # Le plugin trie par taille
              xaxis_type: logarithmic # Axe X logarithmique
              xaxis_title: 'Surface du fragment (ha)'
              yaxis_title: 'Aire cumulée (%)'
              yaxis_range: [0, 100]
              fill: 'tozeroy' # Remplir l'aire sous la courbe
              color: '#2E7D32' # Couleur de la ligne/remplissage
              show_legend: false

          # --- Radial Gauge - Fragmentation ---
          - plugin: radial_gauge
            data_source: fragmentation.meff # Accès à la clé imbriquée
            params:
              title: "Fragmentation (Taille effective de maillage)"
              description: "Probabilité que deux points appartiennent au même fragment"
              value_field: value # Clé JSON de la valeur
              min_value: 0
              max_value: 1000
              units: 'km²'
              value_format: ".1f" # 1 décimale
              steps:
                - { range: [0, 200], color: '#f02828' }
                - { range: [200, 400], color: '#fe6a00' }
                - { range: [400, 600], color: '#e8dd0f' }
                - { range: [600, 800], color: '#81e042' }
                - { range: [800, 1000], color: '#049f50' }

      # --------------------- Fin Groupe: Shape -------------------------


# ------------------------------------------------------------
# Fin Cible 1: Site Web Statique Complet
# ------------------------------------------------------------


# ------------------------------------------------------------
  # Cible 2: API JSON Statique
  # ------------------------------------------------------------
  - name: json_api
    enabled: true
    exporter: json_api_exporter # Plugin responsable de la génération des JSON

    params:
      # --- Paramètres Généraux de l'Exportateur JSON ---
      output_dir: "exports/api" # Répertoire racine pour l'API générée

      # --- Configuration des Fichiers de Détail ---
      # Modèle pour les fichiers JSON de détail (un par entité)
      # {group} sera remplacé par 'taxon', 'plot', 'shape'
      # {id} sera remplacé par l'ID de l'entité
      detail_output_pattern: "{group}/{id}.json" # -> taxon/1605.json

      # --- Configuration des Fichiers d'Index ---
      # Modèle pour les fichiers d'index (un par groupe)
      index_output_pattern: "all_{group}.json" # -> all_taxa.json, all_plots.json

      # Structure du fichier d'index (optionnel, le plugin peut avoir des défauts)
      index_structure:
        total_key: "total"     # Nom de la clé pour le nombre total d'éléments
        list_key: "{group}"    # Nom de la clé pour la liste (ex: "taxa", "plots")
        # Option pour inclure/exclure la clé 'total'
        include_total: true

      # Options d'écriture JSON (optionnel)
      json_options:
        indent: 4           # Indentation pour la lisibilité (null pour aucun)
        ensure_ascii: false # Pour gérer correctement les caractères accentués

    # --- Configuration par Groupe de Données ---
    groups:

      # ------------------------- Groupe: Taxon -------------------------
      - group_by: taxon
        # (Optionnel) Spécifier la source de données si différente du nom du groupe
        # data_source: transformed_taxa_data

        # --- Configuration pour les fichiers de détail (ex: taxon/1605.json) ---
        detail:
          # Mode par défaut: inclure toutes les données transformées pour ce taxon.
          # Correspond à la structure riche vue dans 1605.json.
          pass_through: true
          # Alternative (si vous voulez sélectionner/transformer spécifiquement):
          # pass_through: false
          # fields:
          #   - id: id
          #   - scientific_name: full_name # Renommer
          #   - taxon_metadata: # Créer une sous-structure
          #       source: metadata # Depuis la clé 'metadata' des données transformées
          #       fields: ["taxon_type", "parent_family", "endemic"] # Sélectionner des sous-champs
          #   - distribution: # Utiliser une autre clé des données transformées
          #       source: distribution_map
          #       fields: ["coordinates"] # Sélectionner un sous-champ

        # --- Configuration pour le fichier d'index (ex: all_taxa.json) ---
        index:
          # Définir les champs à inclure pour CHAQUE item dans la liste 'taxa'
          fields:
            # Syntaxe simple: clé_sortie: clé_source
            - id: id
            - name: full_name # Utilise la clé 'full_name' des données source

            # Syntaxe pour sélectionner des champs imbriqués:
            - metadata: # Clé de sortie 'metadata'
                source: metadata # Lire depuis la clé 'metadata' des données source
                fields: # Liste des champs à inclure depuis la source 'metadata'
                  - auto_generated
                  - taxon_type
                  - parent_family
                  - parent_genus # Ajout possible
                  # - original_id # Exclu (décommenter pour inclure)
                  - id_endemia
                  - endemia_url
                  - endemic
                  - protected
                  - protected_provnord
                  - protected_provsud
                  - redlist
                  - images # Inclure le tableau d'images complet tel quel

            # Syntaxe pour générer un champ calculé (ici, l'URL du endpoint)
            - endpoint: # Clé de sortie 'endpoint'
                generator: endpoint_url # Directive spéciale pour le plugin
                params: # Paramètres pour ce générateur
                  base_path: "/api" # Préfixe ajouté au chemin généré
                  # Le plugin utilisera 'detail_output_pattern' de la config globale,
                  # le nom du groupe ('taxon') et l'ID de l'item courant
                  # pour construire l'URL (ex: /api/taxon/1605.json)

      # --------------------- Fin Groupe: Taxon ---------------------

      # ------------------------- Groupe: Plot (API JSON) -------------------------
      - group_by: plot
        # (Optionnel) data_source: transformed_plots_data # Si nécessaire

        # --- Configuration pour les fichiers de détail (ex: plot/2.json) ---
        detail:
          # Inclure toutes les données transformées pour ce plot
          pass_through: true

        # --- Configuration pour le fichier d'index (all_plots.json) ---
        index:
          # Définir les champs à inclure pour CHAQUE item dans la liste 'plots'
          fields:
            # Syntaxe simple: clé_sortie: clé_source
            - id: id

            # Renommer: clé_sortie: clé_source_différente
            # Note: 'name' dans all_plots.json correspond à 'locality' dans 2.json
            - name: locality

            # Générer l'URL du endpoint
            - endpoint: # Clé de sortie 'endpoint'
                generator: endpoint_url # Directive spéciale pour le plugin
                params: # Paramètres pour ce générateur
                  base_path: "/api" # Préfixe ajouté au chemin généré par detail_output_pattern

      # --------------------- Fin Groupe: Plot -------------------------

      # ------------------------- Groupe: Shape (API JSON) -------------------------
      - group_by: shape
        # (Optionnel) data_source: transformed_shapes_data # Si nécessaire

        # --- Configuration pour les fichiers de détail (ex: shape/5.json) ---
        detail:
          # Inclure toutes les données transformées pour ce shape
          pass_through: true

        # --- Configuration pour le fichier d'index (all_shapes.json) ---
        index:
          # Définir les champs à inclure pour CHAQUE item dans la liste 'shapes'
          fields:
            # Syntaxe simple: clé_sortie: clé_source
            - id: id
            - name: name
            - type: type # Inclure le type de shape (commune, mine, etc.)

            # Générer l'URL du endpoint
            - endpoint: # Clé de sortie 'endpoint'
                generator: endpoint_url # Directive spéciale pour le plugin
                params: # Paramètres pour ce générateur
                  base_path: "/api" # Préfixe ajouté au chemin généré par detail_output_pattern

      # --------------------- Fin Groupe: Shape -------------------------

  # ------------------------------------------------------------
  # Cible 3: Export Darwin Core Occurrence (JSON par Taxon)
  # ------------------------------------------------------------
  - name: dwc_occurrence_json
    enabled: true
    # On peut réutiliser l'exporter JSON, le formatage est fait par le transformer
    exporter: json_api_exporter
    params:
      output_dir: "exports/dwc/occurrence_json"
      # Un fichier par taxon, contenant la liste de ses occurrences en DwC
      detail_output_pattern: "{group}/{id}_occurrences_dwc.json"
      # Pas de fichier d'index global pour cet export spécifique
      index_output_pattern: "" # Désactiver l'index pour cette cible
      json_options:
        indent: 2 # Indentation pour lisibilité
        ensure_ascii: false

    groups:
      # --- Configuration DwC pour le groupe Taxon ---
      - group_by: taxon
        # Le plugin transformateur qui fera le mapping Niamoto -> DwC
        transformer_plugin: niamoto_to_dwc_occurrence
        # Paramètres pour le transformateur, notamment le mapping
        transformer_params:
          # Clé dans les données du taxon contenant la liste des occurrences brutes
          occurrence_list_source: "occurrences" # Hypothèse! Adaptez si nécessaire
          # Mapping des champs Niamoto vers les termes Darwin Core Occurrence
          # La valeur peut être une chaîne fixe, une référence à une clé source (@source...),
          # ou une directive spéciale que le plugin interprète.
          # Le contexte @source ici réfère aux données de CHAQUE occurrence dans la liste,
          # mais peut aussi accéder aux données globales du taxon via @taxon.<path>
          mapping:
            # --- Record-Level ---
            type: "Occurrence" # Terme DwC fixe
            language: "fr" # Ou "en"
            license: "CC-BY-4.0" # Spécifiez votre licence
            rightsHolder: "Nom de l'Organisation" # Votre organisation
            datasetName: "Niamoto Export - Nouvelle-Calédonie Flore" # Nom du jeu de données
            basisOfRecord: "HumanObservation" # Ou "Occurrence", "PreservedSpecimen"...

            # --- Occurrence ---
            occurrenceID: # ID unique pour CHAQUE occurrence
              generator: unique_occurrence_id # Le plugin génère un ID unique
              params:
                prefix: "niaocc_"
                # Peut utiliser @taxon.id et un index d'occurrence si pas d'ID source
                source_field: "@source.occ_id" # Hypothèse: clé 'occ_id' dans l'occurrence source
            # catalogNumber: "" # Si pertinent
            occurrenceRemarks: "@source.remarks" # Hypothèse: clé 'remarks'
            # recordNumber: "" # Si pertinent
            recordedBy: "@source.observer" # Hypothèse: clé 'observer'
            # recordedByID: ""
            # individualCount: 1 # Souvent 1 pour une observation
            # organismQuantity: 1
            # organismQuantityType: "individuals"
            # sex: ""
            # lifeStage: ""
            # reproductiveCondition: "" # Peut-être mappable depuis phénologie?
            # establishmentMeans: ""
            # occurrenceStatus: "present"

            # --- Event ---
            eventID: # ID unique pour l'événement/observation
              generator: unique_event_id # Le plugin génère un ID
              params:
                prefix: "niaevt_"
                source_field: "@source.event_id" # Hypothèse
            # parentEventID: ""
            # eventDate: "@source.date" # Hypothèse: clé 'date' au format YYYY-MM-DD ou intervalle
            # eventTime: ""
            # year: # Le plugin peut extraire de eventDate
            # month: # Le plugin peut extraire de eventDate
            # day: # Le plugin peut extraire de eventDate
            # verbatimEventDate: "@source.verbatim_date" # Si la date n'est pas structurée
            # habitat: "" # Si disponible
            # samplingProtocol: ""
            # eventRemarks: ""

            # --- Location ---
            locationID: "@source.location_ref" # Hypothèse
            # higherGeographyID: ""
            # higherGeography: "" # Continent, etc.
            country: "New Caledonia" # Fixe ou depuis source
            countryCode: "NC" # Fixe ou depuis source
            # stateProvince: "@taxon.metadata.province" # Ex: Donnée du taxon, pas de l'occurrence?
            # county: ""
            # municipality: ""
            locality: "@source.locality_description" # Hypothèse: Description textuelle du lieu
            # verbatimLocality: ""
            # minimumElevationInMeters: "@source.elevation" # Hypothèse
            # maximumElevationInMeters: "@source.elevation"
            # locationAccordingTo: "" # Source de la géoréférence
            # locationRemarks: ""
            decimalLatitude: "@source.latitude" # Hypothèse: Latitude WGS84
            decimalLongitude: "@source.longitude" # Hypothèse: Longitude WGS84
            geodeticDatum: "WGS84" # Probablement fixe
            # coordinateUncertaintyInMeters: "@source.uncertainty"
            # coordinatePrecision: ""
            # pointRadiusSpatialFit: ""
            # georeferencedBy: "" # Qui a géoréférencé?
            # georeferenceProtocol: ""
            # georeferenceSources: ""
            # georeferenceVerificationStatus: ""
            # georeferenceRemarks: ""

            # --- GeologicalContext ---
            # ... (Peu pertinent ici a priori) ...

            # --- Identification ---
            identificationID: # ID unique pour l'identification
              generator: unique_identification_id
              params:
                prefix: "niaid_"
                source_field: "@source.identification_id" # Hypothèse
            # identifiedBy: "" # Qui a identifié?
            # dateIdentified: ""
            # identificationReferences: ""
            # identificationRemarks: ""
            # identificationVerificationStatus: ""
            # typeStatus: "" # Si c'est un type

            # --- Taxon --- (Informations liées au taxon identifié pour cette occurrence)
            taxonID: "@taxon.id" # ID interne Niamoto du taxon
            scientificNameID: # LSID ou autre ID externe stable si disponible
              source: "@taxon.metadata.id_taxonref" # Exemple: Utiliser l'ID taxonref si pertinent
              # generator: lsid_from_ref # Le plugin pourrait construire un LSID
            acceptedNameUsageID: "@taxon.metadata.id_taxonref" # Si c'est le nom accepté
            # parentNameUsageID: "" # ID du taxon parent?
            scientificName: "@taxon.full_name" # Nom complet du taxon (depuis les données globales du taxon)
            kingdom: "Plantae" # Fixe
            # phylum: ""
            # class: ""
            # order: "" # Pourrait être recherché par le plugin basé sur la famille?
            family: "@taxon.metadata.parent_family" # Depuis les données globales du taxon
            genus: "@taxon.metadata.parent_genus" # Depuis les données globales du taxon
            # subgenus: ""
            specificEpithet: # Le plugin peut l'extraire de scientificName
              generator: extract_specific_epithet
              params: { source_field: "@taxon.full_name" }
            # infraspecificEpithet: # Le plugin peut l'extraire aussi
            taxonRank: "@taxon.rank_name" # Depuis les données globales du taxon
            # verbatimTaxonRank: ""
            scientificNameAuthorship: "@taxon.authors" # Depuis les données globales du taxon
            # vernacularName: "" # Nom commun si disponible
            # nomenclaturalCode: "ICN" # Code International de Nomenclature algues, fungi, plantes
            # taxonomicStatus: "" # accepted, synonym, etc.
            # taxonRemarks: ""

            # --- ResourceRelationship (Liens vers médias associés) ---
            # Le plugin devra générer plusieurs champs 'associatedMedia' si plusieurs images
            # associatedMedia: # URL d'une image ou média lié à l'occurrence
            #  generator: format_media_urls
            #  params:
            #    source_list: "@taxon.metadata.images" # Liste des images du taxon
            #    url_key: "url" # Clé contenant l'URL dans chaque objet image

# --------------------- Fin Groupe: Taxon (DwC) -------------------------


# ... Vous pourriez ajouter ici d'autres cibles d'export (ex: API JSON, CSV) ...
# - name: api_dwc
#   exporter: json_api_exporter
#   params:
#     output_dir: "exports/api/dwc"
#   groups:
#     - group_by: taxon
#       transformer_plugin: dwc_occurrence_transformer
#       # ...
