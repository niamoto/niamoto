[tool.poetry]
name = "niamoto"
version = "0.0.1a0"
description = ""
authors = ["Julien Barbe <julien.barbe@me.com>"]
readme = "README.md"
license= "GPL-3.0-or-later"
packages = [{include = "niamoto", from = "src"}]
homepage = "https://github.com/niamoto/niamoto"
repository= "https://github.com/niamoto/niamoto"
documentation = "https://github.com/niamoto/niamoto#readme"
keywords = ["niamoto"]
classifiers = [
    "Development Status :: 1 - Planning",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]

[tool.poetry.scripts]
niamoto = "niamoto.cli.commands:cli"

[tool.poetry.dependencies]
python = ">=3.9,<3.12"

# ---------------------
# Database dependencies
# ---------------------

# SQLAlchemy - Comprehensive database toolkit for Python.
# Documentation: https://www.sqlalchemy.org/
sqlalchemy = "^2.0.23"

# alembic - Database migration tool for SQLAlchemy.
# Documentation: https://alembic.sqlalchemy.org/en/latest/
alembic = "^1.12.1"
# geoalchemy2 - Extensions to SQLAlchemy for working with spatial databases.
# Documentation: https://geoalchemy-2.readthedocs.io/
geoalchemy2 = "^0.14.2"

# sqlite-utils - Utilities for manipulating SQLite databases.
# Documentation: https://sqlite-utils.datasette.io/en/stable/
sqlite-utils = "^3.35.2"

# duckdb - In-process SQL OLAP Database Management System.
# Documentation: https://duckdb.org/docs/api/python
# Note: DuckDB is a new database management system that is designed to be used as an embedded database.
# It is designed to be robust against corrupt data, supports both static and dynamic typing, comes with a
# powerful query optimizer and can execute SQL queries in parallel.
# References : https://geog-414.gishub.org/book/duckdb/01_duckdb_intro.html
#              https://medium.com/@dipeit/researchers-please-replace-sqlite-with-duckdb-now-f038044a2702
#              http://duckdb.org/docs/archive/0.9.1/api/python/overview
duckdb = "^0.9.1"

# duckdb-engine - SQLAlchemy dialect for DuckDB.
# Documentation: https://pypi.org/project/duckdb-engine/
duckdb-engine = "^0.9.2"

# ---------------------
# Geospatial libraries
# ---------------------
# leafmap - Interactive mapping library with ease of use for geospatial analysis.
# Documentation: https://leafmap.org/#key-features
leafmap = "^0.28.1"

# geopandas - Extends pandas for spatial data operations.
# Documentation: https://geopandas.org/
geopandas = "^0.14.1"

# rasterio - Library for reading and writing raster datasets (e.g., images, geospatial rasters).
# Documentation: https://rasterio.readthedocs.io/
rasterio = "^1.3.9"

# shapely - Manipulation and analysis of planar geometric objects.
# Documentation: https://shapely.readthedocs.io/
shapely = "^2.0.2"

# -------------------------
# Data Processing libraries
# -------------------------

# pandas - Essential library for data manipulation and analysis.
# Documentation: https://pandas.pydata.org/
pandas = "^2.1.3"

# numpy - Fundamental package for scientific computing in Python.
# Documentation: https://numpy.org/
numpy = "^1.26.1"

# ---------------------------
# Command Line Interface (CLI)
# ---------------------------

# click - Create beautiful command line interfaces in a composable way.
# Documentation: https://click.palletsprojects.com/en/8.0.x/
click = "^8.1.7"

# rich - Python library for rich text and beautiful formatting in the terminal.
rich = "^13.7.0"

# trogon - Auto-generate friendly terminal user interfaces for command line apps.
# Documentation: https://github.com/Textualize/trogon

# tabulate - Pretty-print tabular data within Python.
# Documentation: https://pypi.org/project/tabulate/
tabulate = "^0.9.0"

# pyyaml - YAML parser and emitter for Python.
# Documentation: https://pyyaml.org/wiki/PyYAMLDocumentation
pyyaml = "^6.0.1"

# flask - Lightweight WSGI web application framework.
# Documentation: https://flask.palletsprojects.com/
flask = "^3.0.0"

# loguru - Simplified logging library with a focus on ease of use.
# Documentation: https://loguru.readthedocs.io/
loguru = "^0.7.2"

# pyproj - Python interface to PROJ (cartographic projections and coordinate transformations library).
pyproj = "^3.6.1"

# rjsmin - JavaScript minifier written in Python.
rjsmin = "^1.2.2"

# toml - Python Library for Tom's Obvious, Minimal Language.
toml = "^0.10.2"





[tool.poetry.group.dev.dependencies]
# -------------
# Testing Tools
# -------------

# pytest - A mature full-featured Python testing tool.
# Documentation: https://docs.pytest.org/
pytest = "^7.4.3"

# pytest-cov - Plugin for pytest that measures code coverage during test execution.
# Documentation: https://pytest-cov.readthedocs.io/
pytest-cov = "^4.1.0"

# pytest-mock - Thin-wrapper around the mock package for easier use with pytest.
# Documentation: https://github.com/pytest-dev/pytest-mock
pytest-mock = "^3.12.0"

# hypothesis - Library for property-based testing.
# Documentation: https://hypothesis.readthedocs.io/
hypothesis = "^6.88.3"

# -------------
# Linting & Formatting
# -------------

# An extremely fast Python linter and code formatter, written in Rust.
# Documentation: https://docs.astral.sh/ruff/
ruff = "^0.1.5"
# black - The uncompromising Python code formatter.
# Documentation: https://black.readthedocs.io/

# ----------------
# Type Checking
# ----------------

# mypy - Optional static type checker for Python, aiming to combine the benefits of dynamic and static typing.
# Documentation: http://mypy-lang.org/
mypy = "^1.7.0"
types-click = "^7.1.8"
types-tabulate = "^0.9.0.3"
types-pluggy = "^1.2.0.2"
pandas-stubs = "^2.1.1.230928"
types-toml = "^0.10.8.7"
# pydantic - Data validation and settings management using Python type hinting.
pydantic = "^2.5.0"

# ----------------------------
# Development Utilities
# ----------------------------

# pre-commit - Framework for managing multi-language pre-commit hooks.
# Documentation: https://pre-commit.com/
pre-commit = "^3.5.0"

# ------------------
# Documentation Tools
# ------------------

# sphinx - Tool to create intelligent and beautiful documentation.
# Documentation: https://www.sphinx-doc.org/
sphinx = "^7.2.6"

# furo - A clean, customizable Sphinx theme for Python documentation.
# Documentation: https://pradyunsg.me/furo/
furo = "^2023.9.10"

# pyperclip - Cross-platform Python module for copy and paste clipboard functions.
# Documentation: https://pypi.org/project/pyperclip/
pyperclip = "^1.8.2"
pathspec = "^0.11.2"

pytest-stub = "^1.1.0"

# ----------------------------
# Additional Development Tools
# ----------------------------

# ipython - Advanced interactive Python shell.
# Documentation: https://ipython.org/
ipython = "^8.17.2"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
