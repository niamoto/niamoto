// Exemple de migration d'un composant pour utiliser i18n

// ‚ùå AVANT - Texte hardcod√©
export function ComponentBefore() {
  return (
    <div>
      <h2>Agr√©gations spatiales (optionnel)</h2>
      <p>Ajoutez des regroupements spatiaux pour organiser et analyser vos donn√©es</p>
      <button>Enregistrer</button>
      <button>Annuler</button>
    </div>
  )
}

// ‚úÖ APR√àS - Avec traductions
import { useTranslation } from 'react-i18next'

export function ComponentAfter() {
  const { t } = useTranslation(['import', 'common'])

  return (
    <div>
      <h2>{t('import:aggregations.title')}</h2>
      <p>{t('import:aggregations.description')}</p>
      <button>{t('common:actions.save')}</button>
      <button>{t('common:actions.cancel')}</button>
    </div>
  )
}

// üìù Notes importantes :
// 1. Importer useTranslation depuis react-i18next
// 2. Sp√©cifier les namespaces n√©cessaires : useTranslation(['import', 'common'])
// 3. Utiliser t() avec le format : t('namespace:key.subkey')
// 4. Pour le namespace par d√©faut (common), on peut omettre : t('actions.save')

// üîß Cas d'usage avanc√©s :

// Interpolation de variables
export function InterpolationExample() {
  const { t } = useTranslation()
  const fileName = 'data.csv'

  return <p>{t('common:file.loaded', { fileName })}</p>
  // Affiche : "Fichier s√©lectionn√©: data.csv"
}

// Pluralisation (√† ajouter dans les fichiers de traduction)
export function PluralizationExample() {
  const { t } = useTranslation()
  const count = 5

  return <p>{t('common:units.elements', { count })}</p>
  // Dans le fichier de traduction :
  // "items_one": "{{count}} √©l√©ment"
  // "items_other": "{{count}} √©l√©ments"
}

// Texte avec HTML
import { Trans } from 'react-i18next'

export function HtmlExample() {
  return (
    <Trans i18nKey="common:termsAndConditions">
      J'accepte les <a href="/terms">conditions d'utilisation</a>
    </Trans>
  )
}
